// mixin para centralizar um item ao centro
@mixin mixin-centralize {
    display: flex;
    align-items: center;
    justify-content: center;
}

// mixin que extende da classe placeholder de centralize
@mixin center {
    @extend %centralize;
}

// mixin de criar uma grid, onde se insere a quantidade de colunas, linhas, espaçamente entre elas e o alinhamento.
// temos a verificação a mixin foi feita para um escopo global com isso quando não que e propriedade especifica coloca false no lugar ai ele não adiciona no final
@mixin grid ($columns, $rows, $gap, $align) {
    display: grid;
    @if $columns != false {
        grid-template-columns: $columns;
    }
    @if $rows != false {
        grid-template-rows: $rows;
    }
    @if $gap != false {
        grid-gap: $gap;
    }
    @if $align != false {
        align-items: $align;
    }
}

// mixin de criar um flexbox, onde se insere a forma de justificamento do itens, alinhamento, e direção.
// temos a verificação a mixin foi feita para um escopo global com isso quando não que e propriedade especifica coloca false no lugar ai ele não adiciona no final
@mixin flex ($justify, $align, $direction: false) {
    display: flex;
    @if $justify != false {
        justify-content: $justify;
    }
    @if $align != false {
        align-items: $align;
    }
    @if $direction != false {
        flex-direction: $direction;
    }
}

// mixin de cor é inserido a cor ai verifica sem tem aquela cor inserida
// se sim ele extende para a classe placeholder daquela cor
// se não ele não faz nada
@mixin color ($color) {
    @each $cor, $value in $colors {
        @if $cor == $color {
            @extend %#{$cor};
        }
    }
}

// mixin de cor do background é inserido a cor ai verifica se tem aquela cor inserida
// se sim ele extende para a classe placeholder daquela cor
// se não ele não faz nada
@mixin bg-color ($color) {
    @each $cor, $value in $bg-colors {
        @if $cor == $color {
            @extend %bg-#{$cor};
        }
    }
}

// mixin de none ele extende para a classe placeholder de none
@mixin none() {
    @extend %none;
}

// mixin para as imgs extende para a classe placeholder de imgs
@mixin images() {
    @extend %images;
}

// mixin de title default extende para a classe placeholder de title default
@mixin title() {
    @extend %title-default;
}

// mixin de button default extende para a classe placeholder de button default
@mixin button() {
    @extend %button-default;
}

// mixin de adicionar transition nos itens
@mixin transition() {
    @extend %transition;
}

// mixin de responsividade
@mixin responsive($screenWidth) {
    @media (max-width: $screenWidth) {
        @content;
    }
}
